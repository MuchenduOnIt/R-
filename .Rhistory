v
v <- c(1, 2, 3)
v
s
s <- "a string"
s
class(s)
class(v)
leghth(x)
length(x)
print(length(x))
x <- c("a", "b", "c")
print(length(x))
#Vector Names
v <- c(s1 = 0.3, s2=0.1, s3=1.1)
v
v <- c(s1 = 0.3, s2=0.1, s3=1.1)
v
#Sorting vectors
sort(v)
#Vector Names
v <- c(s1 = 0.3, s2=0.1, s3=1.1)
v
#Sorting vectors
sort(v)
#Names
names(v)
x
#Vector Arithmetic
#The rnorm() generates random variates assuming a normal distribution
x <- rnorm(4)
y <- rnorm(4)
x
#Vector Arithmetic
#The rnorm() generates random variates assuming a normal distribution
x <- rnorm(4)
y <- rnorm(4)
x
print(x + 1)
x <- rnorm(4)
y <- rnorm(4)
x
print(x + 1)
x1
x1 = seq(-1, 0, by = 0.1)
x1
rep(x1, times = 2)
rep(x1, times = 50)
y <- rep(x1, times = 50)
print(length(y))
v <- seq(-3, 3)
tf <- v > 0
tf
TF <- y > -0.6
TF
dorothy
dorothy <- ("Big ass", 20, 64, "Chocalate")
dorothy <- c("Big ass", 20, 64, "Chocalate")
dorothy
dorothy <- c("Big ass", 20, 64, "Chocalate")
Dorothy
dorothy = c("Big ass", 20, 64, "Chocalate")
dorothy
#Data Types
string <- "I am 20 years old"
integer <- 20
float <- 8.9
class(integer)
class(integer)
class(float)
dorothy <- c("Big brains", 20, 64, "Chocalate")
dorothy
#Data Types
string <- "I am 20 years old"
integer <- 20
float <- 8.9
class(integer)
class(float)
class(string)
sort(v)
v <- c(7, 9, 8,2, 43, 56, 6, 4, 7)
v <- c(7, 9, 8,2, 43, 56, 6, 4, 7)
sort(v)
length(v)
v <- c(7, 9, 8,2, 43, 56, 6, 4, 7)
sort(v)
length(v)
v[1]
v <- c(7, 9, 8,2, 43, 56, 6, 4, 7)
sort(v)
length(v)
v[0]
v <- c(7, 9, 8,2, 43, 56, 6, 4, 7)
sort(v)
length(v)
v[3:6]
x <- rnorm(8)
x <- rnorm(8)
x
y <- seq(5, 9)
y
y
y <- seq(5, 900)
y
y <- seq(5, 900, by=5)
y
t <- 9 > 0
t
t <- 9 = 0
t
t <- 9 == 0
t
t <- 9 != 0
t
v <- c(7, 9, 8,2, 43, 56, 6, 4, 7)
summary(v)
string <- "I am 20 years old"
integer <- 20
float <- 8.9
class(integer)
class(float)
class(string)
v <- c("a", "b", "c", "d", "e")
print(length(v))
v <- c("a", "b", "c", "d", "e")
print(length(v))
v[2:lenght(v)]
v <- c("a", "b", "c", "d", "e")
print(length(v))
v[2:length(v)]
4
# Elements are arranged sequentially by row.
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
# Elements are arranged sequentially by column.
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
# Elements are arranged sequentially by row.
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
# Elements are arranged sequentially by column.
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
# Create the matrix.
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
# Create the matrix.
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(p)
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
print(P[1,3])
print(P[2,])
print(P[,3])
he 3rd column.
print(P[,3]
matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)
print(matrix1)
matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)
print(matrix1)
matrix2 <- matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)
print(matrix2)
print(result)
# Add the matrices.
result <- matrix1 + matrix2
cat("Result of addition","\n")
print(result)
# Subtract the matrices
result <- matrix1 - matrix2
cat("Result of subtraction","\n")
print(result)
result <- matrix1 + matrix2
cat("Result of addition","\n")
print(result)
result <- matrix1 - matrix2
cat("Result of subtraction","\n")
print(result)
matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 3)
print(matrix1)
library()
install.packages("XML")
# Give the chart file a name.
png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 5)
# Save the file.
dev.off()
v <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 5)
# Save the file.
dev.off()
# Create data for the graph.
v <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 15)
# Save the file.
dev.off()
# Create data for the graph.
v <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 15)
# Create data for the graph.
v <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 15)
# Save the file.
dev.off()
# Create data for the graph.
v <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 15)
# Save the file.
dev.off()
#Working with logical
v <- seq(-3, 3)
tf <- v > 0
tf
#Working with logical
v <- seq(-3, 3)
Pauline <- v > 0
Pauline
x <- rnorm(4)
y <- rnorm(4)
x
# Create data for the graph.
v <- c(0.06631971, -0.26438446, -0.01516543, 0.00330358)
# Give the chart file a name.
png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 15)
# Save the file.
dev.off()
# Create data for the graph.
v <- c(0.06631971, -0.26438446, -0.01516543, 0.00330358)
# Give the chart file a name.
png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 5)
# Save the file.
dev.off()
# Create data for the graph.
v <- c(0.06631971, -0.26438446, -0.01516543, 0.00330358)
# Give the chart file a name.
png(file = "line_chart.jpg")
# Plot the bar chart.
plot(v,type = "o")
# Save the file.
dev.off()
x <- rnorm(20)
y <- rnorm(20)
x
# Create data for the graph.
v <- c( 0.49974471,  0.62175231,  0.5620094,  1.19033830,  0.02166300, -1.08435121,
-0.86283786, -1.28218179,  0.59471427,  0.07995766,  1.52284837, -0.26231940,
-0.06025192, -0.27726605,  0.98212597,  1.08333421, -1.29356114, -1.34792197,
1.81617819, -1.80016655)
# Give the chart file a name.
png(file = "line_chart.jpg")
# Plot the bar chart.
plot(v,type = "o")
# Save the file.
dev.off()
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
print(list_data[4])
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
print(list_data[2:5])
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
print(list_data[2:4])
install.packages("xlsx")
source('C:/Steve/code/Statistics/Rescue/001.r')
# Create data for the graph.
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
# Give the chart file a name.
png(file = "city.png")
# Plot the chart.
pie(x,labels)
# Save the file.
dev.off()
chol <- read.table(url
("http://assets.datacamp.com/blog_assets/chol.txt"),
header = TRUE)
hist(AirPassengers,
main="Histogram for Air Passengers",
xlab="Passengers",
border="blue",
col="green",
xlim=c(100,700),
las=1,
breaks=5)
print(x)
print(X)
X <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow = TRUE)
print(X)
X <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow = FALSE)
print(X)
det(Y)
X <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow = TRUE)
Y <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow = FALSE)
det(Y)
det(X)
det(Y)
solve(Y)
solve(X)
X * Y
X% * %Y
c bind(X, Y)
bind(X, Y)
t(X)
x
X
t(X)
XY
eigen(X)
X <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow = TRUE)
Y <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow = FALSE)
det(Y)
solve(X)
t(X)
# Eigenvalues
# Are special set of scalars associated with a linear system of
# equations that are sometimes also know as characteristic roots,
# characteristic values, proper values or latent roots
# Get the eigenvalues and eigenvectors using eigen(); It returns a named
# list, with eigenvalues named values and eigenvectors named vectors
print(eigen(X))
print(X%*%Y)
print((X%*%Y) == X%*%Y))
print((X%*%Y) == (X%*%Y))
print((X%*%Y) != (X%*%Y))
print((X%*%Y) == (Y%*%X))
print(det(Y))
print(det(X))
solve(X)
set.seed(2021)
?t.test
data(unempRate, package='astsa')
install.packages(astsa)
install.packages("astsa")
data(unempRate, package='astsa')
data(UnempRate, package='astsa')
UnempRate
boxplot(UnempRate, main="The U.S Unemployment Rate")
hist(UnempRate, main=)
qqnorm(UnempRate)
qqline(UnempRate)
shapiro.test(UnempRate)
test=round(rnorm(100, 60, 10))
test
test=rnorm(100, 60, 10)
test
shapiro.test(test)
qqline(test)
qqnorm(test)
qqline(test)
hist(test, main=)
boxplot(test, main=)
boxplot(test, )
boxplot(test)
test=rnorm(100, 60, 10)
qqnorm(test)
qqline(test)
hist(test, main=)
lines(density(test))
lines(density(test), col = 2)
qqnorm(test)
qqnorm(test)
lines(density(test), col = 2)
lines(density(test, col = 2)
lines(density(test))
hist(test, main=)
lines(density(test), col=2)
lines(density(test))
hist(test, main=, col="grey")
hist(test, main=, col="blue")
hist(test, main=, col="grey")
lines(density(test), col="blue", lwd=2)
hist(UnempRate, main=)
lines(density(UnempRate), col="blue", lwd=2)
lines(density(test), col="blue", lwd=2)
ks.test(test)
? attach
? apply
? scan
? is.matrix
? runif
? randg
?? randg
? runif
? mfrow
? par
? acf
x = rnorm(10)
y = rnorm(10)
t.test(x,y)
# t - test
x = rnorm(10)
y = rnorm(10)
ttest = t.test(x,y)
ttest$statistic
ts = replicate(1000,t.test(rnorm(10),rnorm(10))$statistic)
lines(density(ts))
range(ts)
ts = replicate(1000,t.test(rnorm(10),rnorm(10))$statistic)
lines(density(ts))
pts = seq(-4.5,4.5,length=100)
plot(pts,dt(pts,df=18),col='red',type='l')
lines(density(ts))
# load the World Bank API package
library(WDI)
# pull the data
gdp <- WDI(country=c("US", "CA", "GB", "DE", "CN", "JP", "SG", "IL"), indicator=c("NY.GDP.PCAP.CD", "NY.GDP.MKTP.CD"), start=1960, end=2011) >
# give it good names
names(gdp) <- c("iso2c", "Country", "Year", "PerCapGDP", "GDP")
library(WDI)
install.packages("WDI")
# 22 January, 2020 to 15 April, 2020
x <- c(580, 7813, 28266, 59287, 75700,
87820, 95314, 126214, 218843, 471497,
936851, 1508725, 2072113)
library(lubridate)
install.packages("lubridate")
library(lubridate)
png(file ="timeSeries.png")
mts <- ts(x, start = decimal_date(ymd("2020-01-22")),
frequency = 365.25 / 7)
plot(mts, xlab ="Weekly Data",
ylab ="Total Positive Cases",
main ="COVID-19 Pandemic",
col.main ="darkgreen")
dev.off()
positiveCases <- c(580, 7813, 28266, 59287,
75700, 87820, 95314, 126214,
218843, 471497, 936851,
1508725, 2072113)
deaths <- c(17, 270, 565, 1261, 2126, 2800,
3285, 4628, 8951, 21283, 47210,
88480, 138475)
library(lubridate)
library(lubridate)
png(file ="multivariateTimeSeries.png")
mts <- ts(cbind(positiveCases, deaths),
start = decimal_date(ymd("2020-01-22")),
frequency = 365.25 / 7)
plot(mts, xlab ="Weekly Data",
main ="COVID-19 Cases",
col.main ="darkgreen")
dev.off()
library(WDI)
gdp <- WDI(country=c("US", "CA", "GB", "DE", "CN", "JP", "SG", "IL"),
indicator=c("NY.GDP.PCAP.CD", "NY.GDP.MKTP.CD"), start=1960,
end=2011)
names(gdp) <- c("iso2c", "Country", "Year", "PerCapGDP", "GDP")
head(gdp)
acf(mts)
?set.seed()
set.seed(1)
print(rnorm(5))
set.seed(8)
print(rnorm(5))
